/*
 * Common base C++ source for codeeval solutions.
 * */
#include <algorithm>
#include <cstdint>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <sstream>
#include <string>
#include <vector>

void test();
void process_file(char*);
int main(int argc, char ** argv) {
    if( 1 ) {
	    test();
    } else {
	    process_file(argv[1]);
    }
	return 0;
}

void process(std::string s);

namespace {
    std::vector<std::string> schema;
    // find the path and update schema
    void find_the_path();
}

void test() {
    schema = std::vector<std::string> {
        "************************* *************************", "*                                   * *           *",
        "* * *** *** ******************* ***** * * * * * ***", "* * *   * *   *   * * *                 * * * *   *",
        "***** * * *** * *** * * *** *** * ***** *** *******", "*     * *   * *     *   * * *   *     * * *       *",
        "*** ******* * ***** *** * * ******* * *** * *** * *", "* *     *     *   *     *     *     * *       * * *",
        "* * *********** * ********* * ******* * *** * *****", "*     * *   * * *     *     * *   *   * *   *     *",
        "* ***** * *** * ***** *** *** * * * ******* ***** *", "* *     *   * * *       * * *   * * * *   *     * *",
        "* * ***** *** *** *** *** * ***** *** *** ***** ***", "*     *   * * *     * *       * *       * *     * *",
        "* * ***** * * * *** * *** ***** *** ***** *** * * *", "* * *           *   * *   *     *     *     * *   *",
        "* ******* ******* * *** ******* *** * * ********* *", "*   *       *     * *   *         * * * *     *   *",
        "*** * * ***** * ***** ******* ******* * * * * * ***", "*     *   *   *         *       * *   * * * * *   *",
        "*** * *** * *** ***** ******* * * * *** *** * *** *", "* * * * * * * *     * * *     *       *   * * * * *",
        "* * *** * * * *** *** * * ********* ***** * * * * *", "* * *   * * *     *   * *   *     *   *     * * * *",
        "* * * *** ******* ***** * ******* *** * *** *** * *", "* * *     *   *   *     * *     * * * *   *   * * *",
        "* ***** * * * *** * ***** ***** * * * ***** * * * *", "* *     * * * *     * *     *           * * *   * *",
        "* ***** * *** * ***** *********** ******* * * * * *", "*     * * * *             *   *     * * *   * * * *",
        "* * * *** * *** * ***** ***** ******* * *** * * * *", "* * *   * * *   *     * *             *     * * * *",
        "* ***** * * *********** ******* *** * ******* * * *", "* *     *   *   *     * *   *   * * *       * *   *",
        "* * * ********* * ***** * *** *** *** * ***** * ***", "* * *       *           *   * * *   * *   *   *   *",
        "* ******* ***** ******* * *** * * *** *** * *******", "*   *   *   *   *   *     *         * * * * * * * *",
        "* ***** * *** ***** * ******* * ***** * *** * * * *", "*     *           *     *     * * *   *   *     * *",
        "*** *** ********************* *** *** *** *** * * *", "*   *   *     *               * * *   *       *   *",
        "*** *** * ***** * ******* *** * * *** * *** ***** *", "*       *       *   *   * * *   *     *   * *   * *",
        "*** ***** ***** *** *** *** ***** * * *** *** * * *", "*       *   *   * * *       *   * * *   * *   *   *",
        "*** *** * ***** * ***** *** *** *** *** ******* ***", "*   *     *   *   *     * * * *     * * *     *   *",
        "* ***** *** ***** ******* * * *** *** * *** ***** *", "*   *                 *           *         *     *",
        "************************* *************************"     };

    find_the_path();

std::cout << "SCHEMA BEGIN\n";
    for(auto &s : schema) {
        std::cout << s << "\n";
    }
    std::cout << "SCHEMA END\n";

    // std::endl for flush?
    std::vector<std::string> expected {
        "*************************+*************************", "*                        +++++++    * *           *",
        "* * *** *** *******************+***** * * * * * ***", "* * *   * *   *   * * *    +++++        * * * *   *",
        "***** * * *** * *** * * ***+*** * ***** *** *******", "*     * *   * *     *   * *+*   *     * * *       *",
        "*** ******* * ***** *** * *+******* * *** * *** * *", "* *     *     *   *     *  +  *     * *       * * *",
        "* * *********** * *********+* ******* * *** * *****", "*     * *   * * *     *  +++* *   *   * *   *     *",
        "* ***** * *** * ***** ***+*** * * * ******* ***** *", "* *     *   * * *       *+* *   * * * *   *     * *",
        "* * ***** *** *** *** ***+* ***** *** *** ***** ***", "*     *   * * *     * *  +    * *       * *     * *",
        "* * ***** * * * *** * ***+***** *** ***** *** * * *", "* * *           *   * *+++*     *     *     * *   *",
        "* ******* ******* * ***+******* *** * * ********* *", "*   *       *     * *+++*         * * * *     *   *",
        "*** * * ***** * *****+******* ******* * * * * * ***", "*     *   *   *+++++++  *       * *   * * * * *   *",
        "*** * *** * ***+***** ******* * * * *** *** * *** *", "* * * * * * * *+++  * * *     *       *   * * * * *",
        "* * *** * * * ***+*** * * ********* ***** * * * * *", "* * *   * * *    +*   * *   *     *   *     * * * *",
        "* * * *** *******+***** * ******* *** * *** *** * *", "* * *     *   *  +*     * *     * * * *   *   * * *",
        "* ***** * * * ***+* ***** ***** * * * ***** * * * *", "* *     * * * *+++  * *     *           * * *   * *",
        "* ***** * *** *+***** *********** ******* * * * * *", "*     * * * *  +++++++++  *   *     * * *   * * * *",
        "* * * *** * *** * *****+***** ******* * *** * * * *", "* * *   * * *   *     *+*      +++++++*     * * * *",
        "* ***** * * ***********+*******+*** *+******* * * *", "* *     *   *   *     *+*   *+++* * *+      * *   *",
        "* * * ********* * *****+* ***+*** ***+* ***** * ***", "* * *       *  +++++++++*   *+* *   *+*   *   *   *",
        "* ******* *****+******* * ***+* * ***+*** * *******", "*   *   *   *+++*   *     *  +      *+* * * * * * *",
        "* ***** * ***+***** * *******+* *****+* *** * * * *", "*     *+++++++    *     *    +* * *  +*   *     * *",
        "*** ***+*********************+*** ***+*** *** * * *", "*   *  +*     *+++++++++++++++* * *  +*       *   *",
        "*** ***+* *****+* ******* *** * * ***+* *** ***** *", "*  +++++*+++++++*   *   * * *   *  +++*   * *   * *",
        "***+*****+***** *** *** *** ***** *+* *** *** * * *", "*  +++++*+  *   * * *       *   * *+*   * *   *   *",
        "*** ***+*+***** * ***** *** *** ***+*** ******* ***", "*   *  +++*   *   *     * * * *  +++* * *     *   *",
        "* ***** *** ***** ******* * * ***+*** * *** ***** *", "*   *                 *  +++++++++*         *     *",
        "*************************+*************************"    };
    std::cout << "EXPECTED BEGIN\n";
    for(auto &s : expected) {
        std::cout << s << "\n";
    }
    std::cout << "EXPECTED END\n";
}

void process_file(char* path) {
	std::ifstream stream(path);

    schema.clear();
	for(std::string line; std::getline(stream, line); ) {
		schema.push_back(line);
	}

    find_the_path();

    for(auto &s : schema) {
        std::cout << s << "\n";
    }
}

void process(std::string line) {
	std::cout << "s = '" << line << "'\n";
//    std::istringstream ss { line };
}

namespace {
    void find_the_path() {
    }
}
